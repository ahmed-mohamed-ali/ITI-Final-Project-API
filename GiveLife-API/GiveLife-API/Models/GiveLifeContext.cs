// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using GiveLife_API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace GiveLifeAPI.Models
{
    public partial class GiveLifeContext : DbContext
    {
        public GiveLifeContext()
        {
        }

        public GiveLifeContext(DbContextOptions<GiveLifeContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Cases> Cases { get; set; }
        public virtual DbSet<Cupon> Cupon { get; set; }
       
        public virtual DbSet<OnlineDonner> OnlineDonner { get; set; }
        public virtual DbSet<Organization> Organization { get; set; }
        public virtual DbSet<Post> Post { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<RegionAdmin> RegionAdmin { get; set; }
        public virtual DbSet<RegionCoordinator> RegionCoordinator { get; set; }
        
        
        public virtual DbSet<Donnation> Donnations { get; set; }
        public virtual DbSet<MoneyTransformation> MoneyTransformation { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Cases>(entity =>
            {
                entity.Property(e => e.NationalId).ValueGeneratedNever();

                entity.Property(e => e.Status).HasDefaultValueSql("(N'pending')");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Cases)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cases_Region");
            });

            modelBuilder.Entity<Cupon>(entity =>
            {
                entity.HasOne(d => d.CaseNational)
                    .WithMany(p => p.Cupon)
                    .HasForeignKey(d => d.CaseNationalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cupon_Cases");

                entity.HasOne(d => d.Coord)
                    .WithMany(p => p.Cupon)
                    //.HasForeignKey(d => d.CoordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cupon_RegionCoordinator1");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Cupon)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cupon_Region");
            });

            modelBuilder.Entity<Organization>(entity =>
            {
                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Organization)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Organization_Region");
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Status).HasDefaultValueSql("(N'pending')");

                entity.HasOne(d => d.Case)
                    .WithMany(p => p.Post)
                    .HasForeignKey(d => d.CaseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Post_Cases");

                entity.HasOne(d => d.Coord)
                    .WithMany(p => p.Post)
                    .HasForeignKey(d => d.CoordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Post_RegionCoordinator");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.Post)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Post_Organization");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Post)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Post_Region");
            });

            modelBuilder.Entity<RegionAdmin>(entity =>
            {
                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RegionAdmin)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("FK_RegionAdmin_Region");
            });

            modelBuilder.Entity<RegionCoordinator>(entity =>
            {
                entity.HasOne(d => d.RegionAdmin)
                    .WithMany(p => p.RegionCoordinator)
                    .HasForeignKey(d => d.RegionAdminId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegionCoordinator_RegionAdmin1");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RegionCoordinator)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegionCoordinator_Region");
            });

           

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}